tp <- ggplot(tmp.sum, aes_string(x="cert", y="mu", group=1)) +
geom_line(size=1.1, color=cols[6]) +
geom_line(tmp[tmp$sub == "1", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[1]) +
geom_line(tmp[tmp$sub == "2", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[2]) +
geom_line(tmp[tmp$sub == "3", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[3]) +
geom_line(tmp[tmp$sub == "4", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[4]) +
geom_line(tmp[tmp$sub == "5", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[5]) +
facet_wrap(.~TR, nrow=1) +
scale_fill_manual(values=cols) +
scale_color_manual(values=cols) +
ylab("Accuracy") + xlab("Cue Certainty") + ylim(0.7,1) +
theme(panel.border = element_blank(),
panel.grid.major =   element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title=element_blank()) + theme_cowplot()
ggsave("../images/Fig_RT.png", plot=tp, width = 10, height = 5, units="cm")
rm(tmp)
rm(tmp.sum)
rm(tp)
tp <- ggplot(tmp.sum, aes_string(x="cert", y="mu", group=1)) +
geom_line(size=1.1, color=cols[6]) +
geom_line(tmp[tmp$sub == "1", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[1]) +
geom_line(tmp[tmp$sub == "2", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[2]) +
geom_line(tmp[tmp$sub == "3", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[3]) +
geom_line(tmp[tmp$sub == "4", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[4]) +
geom_line(tmp[tmp$sub == "5", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[5]) +
facet_wrap(.~TR, nrow=1) +
scale_fill_manual(values=cols) +
scale_color_manual(values=cols) +
ylab("Accuracy") + xlab("Cue Certainty") + ylim(0.7,1) +
theme(panel.border = element_blank(),
panel.grid.major =   element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title=element_blank()) + theme_cowplot()
tmp <- mri.inv.eff %>% group_by(sub, cert, TR) %>%
summarise(RT = mean(RT),
acc = mean(acc),
inv_eff = mean(inv_eff))
tmp.sum <- tmp %>% group_by(cert, TR) %>%
summarise(mu=mean(RT))
names(tmp.sum ) <- c("cert", "TR", "mu")
tmp.sum$cert <- factor(tmp.sum$cert, c(".8", ".5", ".2"))
# now reorder the un-summarised data
tmp$cert <- factor(tmp$cert, c(".8", ".5", ".2"))
# splitting the data into each reward condition for overlaying on plot
yval = "RT"
alpha = 1/3
cols = wes_palette("IsleofDogs1")
tp <- ggplot(tmp.sum, aes_string(x="cert", y="mu", group=1)) +
geom_line(size=1.1, color=cols[6]) +
geom_line(tmp[tmp$sub == "1", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[1]) +
geom_line(tmp[tmp$sub == "2", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[2]) +
geom_line(tmp[tmp$sub == "3", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[3]) +
geom_line(tmp[tmp$sub == "4", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[4]) +
geom_line(tmp[tmp$sub == "5", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[5]) +
facet_wrap(.~TR, nrow=1) +
scale_fill_manual(values=cols) +
scale_color_manual(values=cols) +
ylab("Accuracy") + xlab("Cue Certainty") + ylim(0.7,1) +
theme(panel.border = element_blank(),
panel.grid.major =   element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title=element_blank()) + theme_cowplot()
tp
ggplot(tmp.sum, aes_string(x="cert", y="mu", group=1)) +
geom_line(size=1.1, color=cols[6]) +
geom_line(tmp[tmp$sub == "1", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[1]) +
geom_line(tmp[tmp$sub == "2", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[2]) +
geom_line(tmp[tmp$sub == "3", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[3]) +
geom_line(tmp[tmp$sub == "4", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[4]) +
geom_line(tmp[tmp$sub == "5", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[5]) +
facet_wrap(.~TR, nrow=1)
ggplot(tmp.sum, aes_string(x="cert", y="mu", group=1)) +
geom_line(size=1.1, color=cols[6]) +
geom_line(tmp[tmp$sub == "1", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[1]) +
geom_line(tmp[tmp$sub == "2", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[2]) +
geom_line(tmp[tmp$sub == "3", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[3]) +
geom_line(tmp[tmp$sub == "4", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[4]) +
geom_line(tmp[tmp$sub == "5", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[5]) +
facet_wrap(.~TR, nrow=1) +
scale_fill_manual(values=cols) +
scale_color_manual(values=cols)
ggplot(tmp.sum, aes_string(x="cert", y="mu", group=1)) +
geom_line(size=1.1, color=cols[6]) +
geom_line(tmp[tmp$sub == "1", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[1]) +
geom_line(tmp[tmp$sub == "2", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[2]) +
geom_line(tmp[tmp$sub == "3", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[3]) +
geom_line(tmp[tmp$sub == "4", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[4]) +
geom_line(tmp[tmp$sub == "5", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[5]) +
facet_wrap(.~TR, nrow=1) +
scale_fill_manual(values=cols) +
scale_color_manual(values=cols) +
ylab("Accuracy") + xlab("Cue Certainty") + ylim(0.7,1)
ggplot(tmp.sum, aes_string(x="cert", y="mu", group=1)) +
geom_line(size=1.1, color=cols[6]) +
geom_line(tmp[tmp$sub == "1", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[1]) +
geom_line(tmp[tmp$sub == "2", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[2]) +
geom_line(tmp[tmp$sub == "3", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[3]) +
geom_line(tmp[tmp$sub == "4", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[4]) +
geom_line(tmp[tmp$sub == "5", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[5]) +
facet_wrap(.~TR, nrow=1) +
scale_fill_manual(values=cols) +
scale_color_manual(values=cols) +
ylab("RT") + xlab("Cue Certainty") + ylim(0.4,0.8) +
theme(panel.border = element_blank(),
panel.grid.major =   element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title=element_blank()) + theme_cowplot()
ggplot(tmp.sum, aes_string(x="cert", y="mu", group=1)) +
geom_line(size=1.1, color=cols[6]) +
geom_line(tmp[tmp$sub == "1", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[1]) +
geom_line(tmp[tmp$sub == "2", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[2]) +
geom_line(tmp[tmp$sub == "3", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[3]) +
geom_line(tmp[tmp$sub == "4", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[4]) +
geom_line(tmp[tmp$sub == "5", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[5]) +
facet_wrap(.~TR, nrow=1) +
scale_fill_manual(values=cols) +
scale_color_manual(values=cols) +
ylab("RT") + xlab("Cue Certainty") + ylim(0.5,0.8) +
theme(panel.border = element_blank(),
panel.grid.major =   element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title=element_blank()) + theme_cowplot()
wes_palette("IsleofDogs1")
tmp <- mri.inv.eff %>% group_by(sub, cert, TR) %>%
summarise(RT = mean(RT),
acc = mean(acc),
inv_eff = mean(inv_eff))
tmp.sum <- tmp %>% group_by(cert, TR) %>%
summarise(mu=mean(RT))
names(tmp.sum ) <- c("cert", "TR", "mu")
tmp.sum$cert <- factor(tmp.sum$cert, c(".8", ".5", ".2"))
# now reorder the un-summarised data
tmp$cert <- factor(tmp$cert, c(".8", ".5", ".2"))
# splitting the data into each reward condition for overlaying on plot
yval = "RT"
alpha = 1/3
cols = wes_palette("IsleofDogs1")
tp <- ggplot(tmp.sum, aes_string(x="cert", y="mu", group=1)) +
geom_line(size=1.1, color=cols[4]) +
geom_line(tmp[tmp$sub == "1", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[1]) +
geom_line(tmp[tmp$sub == "2", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[2]) +
geom_line(tmp[tmp$sub == "3", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[3]) +
geom_line(tmp[tmp$sub == "4", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[5]) +
geom_line(tmp[tmp$sub == "5", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[6]) +
facet_wrap(.~TR, nrow=1) +
scale_fill_manual(values=cols) +
scale_color_manual(values=cols) +
ylab("RT") + xlab("Cue Certainty") + ylim(0.5,0.8) +
theme(panel.border = element_blank(),
panel.grid.major =   element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title=element_blank()) + theme_cowplot()
ggsave("../images/Fig_RT.png", plot=tp, width = 10, height = 5, units="cm")
tmp <- mri.inv.eff %>% group_by(sub, cert, TR) %>%
summarise(RT = mean(RT),
acc = mean(acc),
inv_eff = mean(inv_eff))
tmp.sum <- tmp %>% group_by(cert, TR) %>%
summarise(mu=mean(acc))
names(tmp.sum ) <- c("cert", "TR", "mu")
tmp.sum$cert <- factor(tmp.sum$cert, c(".8", ".5", ".2"))
# now reorder the un-summarised data
tmp$cert <- factor(tmp$cert, c(".8", ".5", ".2"))
# splitting the data into each reward condition for overlaying on plot
yval = "acc"
alpha = 1/3
cols = wes_palette("IsleofDogs1")
tp <- ggplot(tmp.sum, aes_string(x="cert", y="mu", group=1)) +
geom_line(size=1.1, color=cols[4]) +
geom_line(tmp[tmp$sub == "1", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[1]) +
geom_line(tmp[tmp$sub == "2", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[2]) +
geom_line(tmp[tmp$sub == "3", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[3]) +
geom_line(tmp[tmp$sub == "4", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[5]) +
geom_line(tmp[tmp$sub == "5", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[6]) +
facet_wrap(.~TR, nrow=1) +
scale_fill_manual(values=cols) +
scale_color_manual(values=cols) +
ylab("Accuracy") + xlab("Cue Certainty") + ylim(0.5,0.8) +
theme(panel.border = element_blank(),
panel.grid.major =   element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title=element_blank()) + theme_cowplot()
ggsave("../images/Fig_ACC.png", plot=tp, width = 10, height = 5, units="cm")
rm(tmp)
rm(tmp.sum)
ggplot(tmp.sum, aes_string(x="cert", y="mu", group=1)) +
geom_line(size=1.1, color=cols[4]) +
geom_line(tmp[tmp$sub == "1", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[1]) +
geom_line(tmp[tmp$sub == "2", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[2]) +
geom_line(tmp[tmp$sub == "3", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[3]) +
geom_line(tmp[tmp$sub == "4", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[5]) +
geom_line(tmp[tmp$sub == "5", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[6]) +
facet_wrap(.~TR, nrow=1) +
scale_fill_manual(values=cols) +
scale_color_manual(values=cols) +
ylab("Accuracy") + xlab("Cue Certainty") + ylim(0.6,1) +
theme(panel.border = element_blank(),
panel.grid.major =   element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title=element_blank()) + theme_cowplot()
tmp <- mri.inv.eff %>% group_by(sub, cert, TR) %>%
summarise(RT = mean(RT),
acc = mean(acc),
inv_eff = mean(inv_eff))
tmp.sum <- tmp %>% group_by(cert, TR) %>%
summarise(mu=mean(acc))
names(tmp.sum ) <- c("cert", "TR", "mu")
tmp.sum$cert <- factor(tmp.sum$cert, c(".8", ".5", ".2"))
# now reorder the un-summarised data
tmp$cert <- factor(tmp$cert, c(".8", ".5", ".2"))
# splitting the data into each reward condition for overlaying on plot
yval = "acc"
alpha = 1/3
cols = wes_palette("IsleofDogs1")
tp <- ggplot(tmp.sum, aes_string(x="cert", y="mu", group=1)) +
geom_line(size=1.1, color=cols[4]) +
geom_line(tmp[tmp$sub == "1", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[1]) +
geom_line(tmp[tmp$sub == "2", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[2]) +
geom_line(tmp[tmp$sub == "3", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[3]) +
geom_line(tmp[tmp$sub == "4", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[5]) +
geom_line(tmp[tmp$sub == "5", ], mapping=aes_string(x="cert", y=yval, group=1), alpha=alpha, colour=cols[6]) +
facet_wrap(.~TR, nrow=1) +
scale_fill_manual(values=cols) +
scale_color_manual(values=cols) +
ylab("Accuracy") + xlab("Cue Certainty") + ylim(0.6,1) +
theme(panel.border = element_blank(),
panel.grid.major =   element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title=element_blank()) + theme_cowplot()
tp
ggsave("../images/Fig_ACC.png", plot=tp, width = 10, height = 5, units="cm")
rm(tmp)
rm(tmp.sum)
rm(tp)
# Show it:
TRs <- data.frame(TR=c(700, 1510, 1920),
TE=c('10, 30.56','19.4','22'),
VoxSizeIso = c(2, 1.5, 1.5),
PhaseEncodingDirGRAPPA = c('2','3','2'),
MultiBandFactor=c('4','3','CAiPI shift 1'),
ExcitFlipAngle=c(35,60,15),
ReceiverBand_Hz_Px=c(1930,1116,1116),
partFourier=c('5/8','6/8','6/8'),
FOV=c('192 x 192 x 96','192 x 192 x 122','192 x 192 x 120'),
Nslices=c(48,81,80))
rownames(TRs) <- c("P1", "P2", "P3")
kable(t(TRs), caption="Table 1. Compared sequences") %>% as_image(width=4)
library(knitr)
# rstudio will set the folder where .Rmd file seats as work directory
# set it back to the folder where .Rproj seats
opts_knit$set(root.dir = normalizePath("../"))
opts_chunk$set(fig.align = 'center', cache = FALSE, warning = FALSE,
message = TRUE, echo = FALSE)
options(digits = 3, width = 88, knitr.graphics.auto_pdf = TRUE,
knitr.kable.NA = '')
# download template files if not available
tpl_1 = 'https://raw.githubusercontent.com/daijiang/workflow_demo/master/template/preamble.tex'
tpl_2 = 'https://raw.githubusercontent.com/daijiang/workflow_demo/master/template/doc_prefix.tex'
# bib_1 = 'https://raw.githubusercontent.com/daijiang/workflow_demo/master/template/ref.bib'
# change directory accordingly
if(!file.exists(tpl_1f <- '../template/preamble.tex')) download.file(tpl_1, tpl_1f)
if(!file.exists(tpl_2f <- '../template/doc_prefix.tex')) download.file(tpl_2, tpl_2f)
if(knitr::is_latex_output() | knitr::is_html_output()){
library(kableExtra)
} else {
options(kableExtra.auto_format = FALSE) # for docx
}
#library(rmarkdown)    # You need this library to run this template.
#library(epuRate)
library(tidyverse)
library(cowplot)
library(readr)
library(wesanderson)
#library(rjson)
library(RJSONIO)
library(cowplot)
library(rlang)
library(kableExtra)
source("../R/R_rainclouds.R") # for the raincloud plot
#source("R/R_rainclouds.R")
paradigm.fig.pth <- '../images/Fig_ROIs.png'
#paradigm.fig <- readPNG(paradigm.fig.pth, native=TRUE, info=TRUE)
include_graphics(paradigm.fig.pth)
paradigm.fig.pth <- '../images/Fig_Paradigm.png'
#paradigm.fig <- readPNG(paradigm.fig.pth, native=TRUE, info=TRUE)
include_graphics(paradigm.fig.pth)
# Show it:
TRs <- data.frame(TR=c(700, 1510, 1920),
TE=c('10, 30.56','19.4','22'),
VoxSizeIso = c(2, 1.5, 1.5),
PhaseEncodingDirGRAPPA = c('2','3','2'),
MultiBandFactor=c('4','3','CAiPI shift 1'),
ExcitFlipAngle=c(35,60,15),
ReceiverBand_Hz_Px=c(1930,1116,1116),
partFourier=c('5/8','6/8','6/8'),
FOV=c('192 x 192 x 96','192 x 192 x 122','192 x 192 x 120'),
Nslices=c(48,81,80))
rownames(TRs) <- c("P1", "P2", "P3")
kable(t(TRs), caption="Table 1. Compared sequences") %>% as_image(width=4)
# Show it:
TRs <- data.frame(TR=c(700, 1510, 1920),
TE=c('10, 30.56','19.4','22'),
VoxSizeIso = c(2, 1.5, 1.5),
PhaseEncodingDirGRAPPA = c('2','3','2'),
MultiBandFactor=c('4','3','CAiPI shift 1'),
ExcitFlipAngle=c(35,60,15),
ReceiverBand_Hz_Px=c(1930,1116,1116),
partFourier=c('5/8','6/8','6/8'),
FOV=c('192 x 192 x 96','192 x 192 x 122','192 x 192 x 120'),
Nslices=c(48,81,80))
rownames(TRs) <- c("P1", "P2", "P3")
kable(t(TRs), caption="Table 1. Compared sequences") %>% svae_kable(file="../images/test.png")
# Show it:
TRs <- data.frame(TR=c(700, 1510, 1920),
TE=c('10, 30.56','19.4','22'),
VoxSizeIso = c(2, 1.5, 1.5),
PhaseEncodingDirGRAPPA = c('2','3','2'),
MultiBandFactor=c('4','3','CAiPI shift 1'),
ExcitFlipAngle=c(35,60,15),
ReceiverBand_Hz_Px=c(1930,1116,1116),
partFourier=c('5/8','6/8','6/8'),
FOV=c('192 x 192 x 96','192 x 192 x 122','192 x 192 x 120'),
Nslices=c(48,81,80))
rownames(TRs) <- c("P1", "P2", "P3")
kable(t(TRs), caption="Table 1. Compared sequences") %>% save_kable(file="../images/test.png")
install.packages("magick")
# Show it:
TRs <- data.frame(TR=c(700, 1510, 1920),
TE=c('10, 30.56','19.4','22'),
VoxSizeIso = c(2, 1.5, 1.5),
PhaseEncodingDirGRAPPA = c('2','3','2'),
MultiBandFactor=c('4','3','CAiPI shift 1'),
ExcitFlipAngle=c(35,60,15),
ReceiverBand_Hz_Px=c(1930,1116,1116),
partFourier=c('5/8','6/8','6/8'),
FOV=c('192 x 192 x 96','192 x 192 x 122','192 x 192 x 120'),
Nslices=c(48,81,80))
rownames(TRs) <- c("P1", "P2", "P3")
kable(t(TRs), caption="Table 1. Compared sequences") %>% save_kable(file="../images/test.png")
library(magick)
########################### TR Table
kable(t(TRs), caption="Table 1. Compared sequences") %>% save_kable(file="../images/test.png")
install.packages("magittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
#library(rmarkdown)    # You need this library to run this template.
#library(epuRate)
library(tidyverse)
library(cowplot)
library(readr)
library(wesanderson)
#library(rjson)
library(RJSONIO)
library(cowplot)
library(rlang)
library(kableExtra)
library(magrittr)
source("../R/R_rainclouds.R") # for the raincloud plot
#source("R/R_rainclouds.R")
paradigm.fig.pth <- '../images/Fig_ROIs.png'
#paradigm.fig <- readPNG(paradigm.fig.pth, native=TRUE, info=TRUE)
include_graphics(paradigm.fig.pth)
library(knitr)
# rstudio will set the folder where .Rmd file seats as work directory
# set it back to the folder where .Rproj seats
opts_knit$set(root.dir = normalizePath("../"))
opts_chunk$set(fig.align = 'center', cache = FALSE, warning = FALSE,
message = TRUE, echo = FALSE)
options(digits = 3, width = 88, knitr.graphics.auto_pdf = TRUE,
knitr.kable.NA = '')
# download template files if not available
tpl_1 = 'https://raw.githubusercontent.com/daijiang/workflow_demo/master/template/preamble.tex'
tpl_2 = 'https://raw.githubusercontent.com/daijiang/workflow_demo/master/template/doc_prefix.tex'
# bib_1 = 'https://raw.githubusercontent.com/daijiang/workflow_demo/master/template/ref.bib'
# change directory accordingly
if(!file.exists(tpl_1f <- '../template/preamble.tex')) download.file(tpl_1, tpl_1f)
if(!file.exists(tpl_2f <- '../template/doc_prefix.tex')) download.file(tpl_2, tpl_2f)
if(knitr::is_latex_output() | knitr::is_html_output()){
library(kableExtra)
} else {
options(kableExtra.auto_format = FALSE) # for docx
}
#library(rmarkdown)    # You need this library to run this template.
#library(epuRate)
library(magrittr)
library(tidyverse)
library(cowplot)
library(readr)
library(wesanderson)
#library(rjson)
library(RJSONIO)
library(cowplot)
library(rlang)
library(kableExtra)
source("../R/R_rainclouds.R") # for the raincloud plot
#source("R/R_rainclouds.R")
paradigm.fig.pth <- '../images/Fig_ROIs.png'
#paradigm.fig <- readPNG(paradigm.fig.pth, native=TRUE, info=TRUE)
include_graphics(paradigm.fig.pth)
paradigm.fig.pth <- '../images/Fig_Paradigm.png'
#paradigm.fig <- readPNG(paradigm.fig.pth, native=TRUE, info=TRUE)
include_graphics(paradigm.fig.pth)
# Show it:
TRs <- data.frame(TR=c(700, 1510, 1920),
TE=c('10, 30.56','19.4','22'),
VoxSizeIso = c(2, 1.5, 1.5),
PhaseEncodingDirGRAPPA = c('2','3','2'),
MultiBandFactor=c('4','3','CAiPI shift 1'),
ExcitFlipAngle=c(35,60,15),
ReceiverBand_Hz_Px=c(1930,1116,1116),
partFourier=c('5/8','6/8','6/8'),
FOV=c('192 x 192 x 96','192 x 192 x 122','192 x 192 x 120'),
Nslices=c(48,81,80))
rownames(TRs) <- c("P1", "P2", "P3")
kable(t(TRs), caption="Table 1. Compared sequences") %>% save_kable(file="../images/test.png")
# Show it:
TRs <- data.frame(TR=c(700, 1510, 1920),
TE=c('10, 30.56','19.4','22'),
VoxSizeIso = c(2, 1.5, 1.5),
PhaseEncodingDirGRAPPA = c('2','3','2'),
MultiBandFactor=c('4','3','CAiPI shift 1'),
ExcitFlipAngle=c(35,60,15),
ReceiverBand_Hz_Px=c(1930,1116,1116),
partFourier=c('5/8','6/8','6/8'),
FOV=c('192 x 192 x 96','192 x 192 x 122','192 x 192 x 120'),
Nslices=c(48,81,80))
rownames(TRs) <- c("P1", "P2", "P3")
kable(t(TRs), caption="Table 1. Compared sequences") %>% kable_classic(full_width=F, html_font"Cambria")
# Show it:
TRs <- data.frame(TR=c(700, 1510, 1920),
TE=c('10, 30.56','19.4','22'),
VoxSizeIso = c(2, 1.5, 1.5),
PhaseEncodingDirGRAPPA = c('2','3','2'),
MultiBandFactor=c('4','3','CAiPI shift 1'),
ExcitFlipAngle=c(35,60,15),
ReceiverBand_Hz_Px=c(1930,1116,1116),
partFourier=c('5/8','6/8','6/8'),
FOV=c('192 x 192 x 96','192 x 192 x 122','192 x 192 x 120'),
Nslices=c(48,81,80))
rownames(TRs) <- c("P1", "P2", "P3")
kable(t(TRs), caption="Table 1. Compared sequences") %>% kable_classic(full_width=F, html_font="Cambria")
# Show it:
TRs <- data.frame(TR=c(700, 1510, 1920),
TE=c('10, 30.56','19.4','22'),
VoxSizeIso = c(2, 1.5, 1.5),
PhaseEncodingDirGRAPPA = c('2','3','2'),
MultiBandFactor=c('4','3','CAiPI shift 1'),
ExcitFlipAngle=c(35,60,15),
ReceiverBand_Hz_Px=c(1930,1116,1116),
partFourier=c('5/8','6/8','6/8'),
FOV=c('192 x 192 x 96','192 x 192 x 122','192 x 192 x 120'),
Nslices=c(48,81,80))
rownames(TRs) <- c("P1", "P2", "P3")
kbl(t(TRs), caption="Table 1. Compared sequences") %>% kable_classic(full_width=F, html_font="Cambria")
install.packages("kableExtra")
install.packages("kableExtra")
# Show it:
TRs <- data.frame(TR=c(700, 1510, 1920),
TE=c('10, 30.56','19.4','22'),
VoxSizeIso = c(2, 1.5, 1.5),
PhaseEncodingDirGRAPPA = c('2','3','2'),
MultiBandFactor=c('4','3','CAiPI shift 1'),
ExcitFlipAngle=c(35,60,15),
ReceiverBand_Hz_Px=c(1930,1116,1116),
partFourier=c('5/8','6/8','6/8'),
FOV=c('192 x 192 x 96','192 x 192 x 122','192 x 192 x 120'),
Nslices=c(48,81,80))
rownames(TRs) <- c("P1", "P2", "P3")
kable(t(TRs), caption="Table 1. Compared sequences") %>% kable_classic(full_width=F, html_font="Cambria")
#library(rmarkdown)    # You need this library to run this template.
#library(epuRate)
library(magrittr)
library(tidyverse)
library(cowplot)
library(readr)
library(wesanderson)
#library(rjson)
library(RJSONIO)
library(cowplot)
library(rlang)
library(kableExtra)
source("../R/R_rainclouds.R") # for the raincloud plot
#source("R/R_rainclouds.R")
# Show it:
TRs <- data.frame(TR=c(700, 1510, 1920),
TE=c('10, 30.56','19.4','22'),
VoxSizeIso = c(2, 1.5, 1.5),
PhaseEncodingDirGRAPPA = c('2','3','2'),
MultiBandFactor=c('4','3','CAiPI shift 1'),
ExcitFlipAngle=c(35,60,15),
ReceiverBand_Hz_Px=c(1930,1116,1116),
partFourier=c('5/8','6/8','6/8'),
FOV=c('192 x 192 x 96','192 x 192 x 122','192 x 192 x 120'),
Nslices=c(48,81,80))
rownames(TRs) <- c("P1", "P2", "P3")
kable(t(TRs), caption="Table 1. Compared sequences") %>% kable_classic(full_width=F, html_font="Cambria")
c <- wes_palette("Royal1")[1:4]
c
